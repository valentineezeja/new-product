AWSTemplateFormatVersion: 2010-09-09	
Description: Pipeline for the "new-product" project on AWS

Parameters:
  GitHubOwner:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"

  GitHubRepository:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: new-product #just repo name, not the full URL
    
  GitHubBranch:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: master


  DestinationS3Bucket: 
    Type: String
    Default: web-files-s3-root
    AllowedPattern: "[A-Za-z0-9-]+"
    Description: The bucket created earlier for the web/public files

  SourceS3Bucket:
      Type: String
      Default: lambda-sourcewcode
      AllowedPattern: "[A-Za-z0-9-]+"
      Description: The name of the S3 bucket which contains the Lambda source code in zipped format

  myCloudfrontDist: 
      Type: String
      AllowedPattern: "[A-Za-z0-9-]+"
      Description: The existing cloudfront distribution
  
  CloudfrontDomainName:
      Type: String
      Description: The existing CloudFront domain name

Resources:
  CodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Sid: CodeCommitPolicy
                Effect: Allow
                Action:
                  - 'codecommit:GitPull'
                Resource: '*'
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource: '*'
  CodeBuildSourceCredential:
    Type: 'AWS::CodeBuild::SourceCredential'
    Properties:
      AuthType: PERSONAL_ACCESS_TOKEN
      ServerType: GITHUB
      Token: '{{resolve:secretsmanager:GitHubSecret2:SecretString:Secretkey}}'
  CodeBuildProject:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Ref 'AWS::StackName'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source:
        Type: GITHUB
        Location: 'https://github.com/valentineezeja/new-product.git'
        BuildSpec: buildspec.yaml
        Auth:
          Type: OAUTH
          Resource: !Ref CodeBuildSourceCredential
      Artifacts:
        Type: NO_ARTIFACTS
      Triggers:
        Webhook: true
        FilterGroups:
          - - Type: EVENT
              Pattern: 'PULL_REQUEST_CREATED, PULL_REQUEST_UPDATED, PULL_REQUEST_REOPENED'
            - Type: BASE_REF
              Pattern: !Sub '^refs/heads/${GitHubBranch}$'
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
    
  CreateLambdaExecutionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Lambda_Cloudfront_Invalidation
      Description: "This policy invalidates Cloudfront Distribution called inside a CodePipeline"
      Path: "/"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: VisualEditor0
            Effect: Allow
            Action: cloudfront:CreateInvalidation
            Resource: '*'
          - Sid: VisualEditor1
            Effect: Allow
            Action: [
              'codepipeline:PutJobSuccessResult',
              'codepipeline:PutJobFailureResult'
            ]
            Resource: '*'
          - Sid: VisualEditor2
            Effect: Allow
            Action: logs:*
            Resource: '*'

  LambdaExecutedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      ManagedPolicyArns: [
        !Ref CreateLambdaExecutionPolicy
      ]
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
      Path: /
      RoleName: LambdaExecutedRole_Invalidate

  LambdaCloudfrontInvalidation:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "invalidateCloudFront.lambda_handler"
      FunctionName: invalidateCloudfront
      Role:
        Fn::GetAtt:
          - "LambdaExecutedRole"
          - "Arn"
      Code:
        S3Bucket: !Ref SourceS3Bucket
        S3Key: "invalidateCloudFront.zip"
      Runtime: "python2.7"
      Timeout: 25

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: CloudWatchLogsPolicy
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Sid: S3GetObjectPolicy
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource:
                  - '*'
              - Sid: S3PutObjectPolicy
                Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource:
                  - '*'
              - Sid: S3BucketIdentity
                Effect: Allow
                Action:
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                Resource:
                  - '*'
              - Sid: CodeBuildPolicy
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
                Effect: Allow
  CodePipelineArtifactStore:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
  CodePipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: >-
          '{{resolve:secretsmanager:GitHubSecret2:SecretString:Secretkey}}'
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
        - JsonPath: $.repository.name
          MatchEquals: '{Repo}'
      TargetPipeline: !Ref CodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt 
        - CodePipeline
        - Version
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt 
        - CodePipelineServiceRole
        - Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: >-
                  {{resolve:secretsmanager:GitHubSecret2:SecretString:Secretkey}}
              OutputArtifacts:
                - Name: SourceCode

        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              OutputArtifacts:
                - Name: BuildOutput
              InputArtifacts:

                - Name: SourceCode

        - Name: Deploy
          Actions:
            - Name: S3Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: '1'
              Configuration:
                BucketName: !Ref DestinationS3Bucket
                Extract: 'true'
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
       
        - Name: LambdaDeploy
          Actions:
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Provider: Lambda
                Version: '1'
              Configuration:
                FunctionName: invalidateCloudfront
                EUserParameters: !Ref myCloudfrontDist
              RunOrder: 2

